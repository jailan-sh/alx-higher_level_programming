The ''0-add_integer'' module
====================================

``add_integer(a, b)`` a function that return adds of 2 integers.
arguments must be integers or floats otherwise raise error.

Import function
===============

	>>> add_integer = __import__("0-add_integer").add_integer

Add Two Integers
================

	>>> add_integer(4, 3)
	7

	>>> add_integer(0, 3)
	3

	>>> add_integer(-2, 0)
	-2

	>>> add_integer(-2, -5)
	-7

	>>> add_integer(-2, 3)
	1

Add Two Floats
===============
    >>> add_integer(4.0, 3.0)
    7

    >>> add_integer(-2.0, 3.0)
    1

    >>> add_integer(-2.0, -5.0)
    -7

    >>> add_integer(2.0, -3.0)
    -1

Non-Numbers
===========

raise a TypeError

String

    >>> add_integer("jil", 25)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(25, "jil")
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

character

    >>> add_integer('J', 8)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(8, 'j')
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

List

    >>> add_integer([25, 8], 4)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(4, [8, 25])
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

tuple

    >>> add_integer((25, 8), 4)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(4, (8, 25))
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

set

    >>> add_integer({25, 8}, 4)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(4, {8, 25})
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Dict

    >>> add_integer({"k" : 8}, 4)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer(4, {"k" : 25})
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

None

    >>> add_integer(None, 4)
    Traceback (most recent call last):
          ...
    TypeError: a must be an integer


    >>> add_integer(4, None)
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Overflow
===============

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('inf'), float('inf'))
    Traceback (most recent call last):
              ...
    OverflowError: cannot convert float infinity to integer

No Arguments
===============

If no arguments are given, an error will appear asking for at least
1 argument


    >>> add_integer()
    Traceback (most recent call last):
              ...
    TypeError: add_integer() missing 1 required positional argument: 'a'


Not a Number
=============


    >>> add_integer(float('nan'))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float('nan'), 2)
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float('nan'), float('nan'))
    Traceback (most recent call last):
              ...
    ValueError: cannot convert float NaN to integer

Missing Second Argument
========================

If the second argument 'b' is not provided, this variable will
take the value 98 by default

    >>> add_integer(2)
    100

    >>> add_integer(2.0)
    100

    >>> add_integer(None)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


    >>> add_integer("Hello")
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer({"H": 2})
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer([1])
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer((1, 2))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer({1, 2})
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer
