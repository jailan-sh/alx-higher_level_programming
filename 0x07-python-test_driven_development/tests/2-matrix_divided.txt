the ''matrix_divided'' module
====================================

``matrix_divided(matrix, div)`` function that divides all elements of a matrix.
args : matrix must be a list of lists of integers or floats
	row of the matrix must be of the same size
div must be a number (integer or float),not equal to 0
otherwise raising errors.

Import function
===============

matrix_divided = __import__('2-matrix_divided').matrix_divided

Matrix with Integers, Floats, Mixed result should be round 2
============================================================

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[1.5, 2.4, 3.1], [4.3, 5.0, 6.8]], 2)
    [[0.75, 1.2, 1.55], [2.15, 2.5, 3.4]]

    >>> matrix_divided([[1, 2.4, 3], [4.3, 5, 6.8]], 2)
    [[0.5, 1.2, 1.5], [2.15, 2.5, 3.4]]

    >>> matrix_divided([[1, -2, 3], [-4, 5, 6]], 2)
    [[0.5, -1.0, 1.5], [-2.0, 2.5, 3.0]]

    >>> matrix_divided([[1.5, -2.4, 3.1], [4.3, 5.0, -6.8]], 2)
    [[0.75, -1.2, 1.55], [2.15, 2.5, -3.4]]

    >>> matrix_divided([[-1, -2.4, -3], [4.3, -5, -6.8]], 2)
    [[-0.5, -1.2, -1.5], [2.15, -2.5, -3.4]]

    >>> matrix_divided([[-1.298, -2.4, -3.21358], [4.3, -5, -6.86845]], 2)
    [[-0.65, -1.2, -1.61], [2.15, -2.5, -3.43]]

div errors (0 or not number)
===========================

    >>> matrix_divided([[1, 2.4, 3], [4.3, 5, 6.8]], 0)
    Traceback (most recent call last):
              ...
    ZeroDivisionError: division by zero

    >>> matrix_divided([[-1, -2.4, -3], [4.3, -5, -6.8]], 0)
    Traceback (most recent call last):
              ...
    ZeroDivisionError: division by zero

String as div

    >>> matrix_divided([[1, 3], [4, 5]], "2")
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

List as div

    >>> matrix_divided([[1, 3], [4, 5]], [2])
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

Tuple as div

    >>> matrix_divided([[1, 3], [4, 5]], (2, 2))
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

Set as div

    >>> matrix_divided([[1, 3], [4, 5]], {2, 2})
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

Dictionary as div

    >>> matrix_divided([[1, 3], [4, 5]], {"H": 2})
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

Not a Number

    >>> matrix_divided([[1, 3], [4, 5]], float('nan'))
    Traceback (most recent call last):
              ...
    TypeError: div must be a number

Overflow divide by inf gives 0
==============================

    >>> matrix_divided([[1, 2], [3, 4]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

matrix errors (len row ,not list of lists of int or float intems)
=================================================================

    >>> matrix_divided(None, 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Empty Matrix

    >>> matrix_divided([[]], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty List

    >>> matrix_divided([], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

List with Values

    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Tuple

    >>> matrix_divided((3, 4), 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Set

    >>> matrix_divided({3, 4}, 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dictionary

    >>> matrix_divided({"3": 4}, 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 3], 4], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2, 3], [3, 4]], 2)
    Traceback (most recent call last):
              ...
    TypeError: Each row of the matrix must have the same size


    >>> matrix_divided([[1, 2, 3], [5, 8, 9, 10]], 2)
    Traceback (most recent call last):
              ...
    TypeError: Each row of the matrix must have the same size


One Element Empty:

    >>> matrix_divided([[1, 3], []], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

One Element a String

    >>> matrix_divided([[1, 3], [1, "Hello"]], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

One Element Another Matrix

    >>> matrix_divided([[1, 3], [[1, 2]]], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


One Element a Tuple

    >>> matrix_divided([[1, 3], (3, 4)], 2)
    Traceback (most recent call last):
              ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

missing Arguments
=================

    >>> matrix_divided()
    Traceback (most recent call last):
              ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    >>> matrix_divided([[1, 2], [3, 4]])
    Traceback (most recent call last):
              ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
